---
import { prisma } from "../db";

// Fetch both members and all available zones in parallel
const [miembros, zonas] = await Promise.all([
  prisma.miembros.findMany({
    include: {
      zonas: true, // Include related zone data for display
    },
    orderBy: {
      nombre: "asc",
    },
  }),
  prisma.zonas.findMany({
    where: {
      miembros: {
        some: {}, // Only fetch zones that have at least one member
      },
    },
    orderBy: {
      nombre_zona: "asc",
    },
  }),
]);
---

<div class="mb-4 w-full p-4 bg-slate-800 rounded-lg">
  <div class="flex flex-wrap items-center gap-x-4 gap-y-3">
    <!-- Search and Add Button -->
    <div class="flex-grow flex flex-wrap sm:flex-nowrap items-center gap-x-4 gap-y-3">
      <div class="relative flex-grow min-w-[200px]">
        <input
          type="text"
          id="filter-input"
          placeholder="Buscar..."
          class="w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 bg-white text-gray-900 text-sm"
        />
        <button
          id="clear-filter-btn"
          class="absolute inset-y-0 right-0 items-center pr-3 hidden"
          aria-label="Limpiar búsqueda"
        >
          <svg
            class="h-5 w-5 text-gray-400 hover:text-gray-600"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <a
        href="/crear"
        class="flex-shrink-0 inline-flex items-center gap-2 rounded bg-blue-600 px-3 py-2 text-sm font-medium text-white hover:bg-blue-700 whitespace-nowrap"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
            clip-rule="evenodd"></path>
        </svg>
        Nuevo
      </a>
    </div>

    <!-- Filters -->
    <div class="flex flex-wrap items-center gap-x-4 gap-y-3">
      <div class="flex items-center flex-shrink-0">
        <input
          id="status-filter-checkbox"
          type="checkbox"
          class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <label
          for="status-filter-checkbox"
          class="ml-2 text-sm font-medium text-slate-50">Mostrar inactivos</label
        >
      </div>

      <select
        id="zona-filter-select"
        class="flex-shrink-0 block w-full rounded-md border-gray-300 bg-white px-3 py-2 text-sm text-gray-900 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 sm:w-auto"
      >
        <option value="all">Todas las zonas</option>
        {zonas.map((zona) => <option value={zona.id}>{zona.nombre_zona}</option>)}
      </select>
    </div>

    <!-- Counter -->
    <div class="flex flex-wrap items-center gap-x-4 gap-y-3 sm:ml-auto">
      <div class="flex-shrink-0 text-sm whitespace-nowrap">
        <span id="record-counter-label" class="text-slate-50 font-medium"
          >Registros:</span
        >
        <span id="record-counter-value" class="font-bold text-slate-50"
          >{miembros.length}</span
        >
      </div>
    </div>
  </div>
</div>

<div class="overflow-x-auto rounded-lg border border-gray-700 shadow-md">
  <table
    class="table-fixed min-w-full divide-y-2 divide-gray-700 bg-slate-800 text-sm"
  >
    <thead class="bg-slate-900">
      <tr>
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50"
          >Nombre y Apellido</th
        >
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50">Cédula</th>
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50">Teléfono</th>
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50">Status</th>
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50">Zona</th>
        <th class="whitespace-nowrap px-4 py-2 font-medium text-left text-slate-50">Acciones</th>
      </tr>
    </thead>
    <tbody id="miembros-table-body" class="divide-y divide-gray-700">
      {
        miembros.map((miembro) => (
          <tr
            data-miembro-id={miembro.id}
            data-status={miembro.status ? "activo" : "inactivo"}
            data-zona-id={miembro.zona_id}
            class="text-slate-50"
          >
            <td class="whitespace-nowrap px-4 py-2 font-medium">
              {miembro.nombre} {miembro.apellido}
            </td>
            <td class="whitespace-nowrap px-4 py-2 text-gray-400">{miembro.cedula}</td>
            <td class="whitespace-nowrap px-4 py-2 text-gray-400">{miembro.telef || "N/A"}</td>
            <td class="whitespace-nowrap px-4 py-2 text-gray-400">
              <span
                class:list={[
                  "px-2 py-1 rounded-full text-xs font-semibold",
                  miembro.status
                    ? "bg-green-900 text-green-300"
                    : "bg-red-900 text-red-300",
                ]}
              >
                {miembro.status ? "Activo" : "Inactivo"}
              </span>
            </td>
            <td class="whitespace-nowrap px-4 py-2 text-gray-400">{miembro.zonas.nombre_zona}</td>
            <td class="whitespace-nowrap px-4 py-2">
              <div class="flex items-center gap-2">
                <a
                  href={`/editar/${miembro.id}`}
                  class="inline-block rounded bg-yellow-500 px-3 py-1 text-xs font-medium text-white hover:bg-yellow-600"
                >
                  Editar
                </a>
                <button
                  data-id={miembro.id}
                  class="delete-btn inline-block rounded bg-red-600 px-3 py-1 text-xs font-medium text-white hover:bg-red-700"
                >
                  Eliminar
                </button>
              </div>
            </td>
          </tr>
        ))
      }
    </tbody>
  </table>
</div>

<script>
  function initializePage() {
    // Get all interactive elements
    /** @type {HTMLInputElement | null} */
    const filterInput = document.getElementById("filter-input");
    /** @type {HTMLButtonElement | null} */
    const clearFilterBtn = document.getElementById("clear-filter-btn");
    /** @type {HTMLInputElement | null} */
    const statusCheckbox = document.getElementById("status-filter-checkbox");
    /** @type {HTMLSelectElement | null} */
    const zonaSelect = document.getElementById("zona-filter-select");
    /** @type {HTMLTableSectionElement | null} */
    const tableBody = document.getElementById("miembros-table-body");
    /** @type {HTMLSpanElement | null} */
    const recordCounterLabel = document.getElementById("record-counter-label");
    /** @type {HTMLSpanElement | null} */
    const recordCounterValue = document.getElementById("record-counter-value");

    if (
      !filterInput ||
      !tableBody ||
      !clearFilterBtn ||
      !statusCheckbox ||
      !zonaSelect
    ) {
      return; // Exit if elements are not on the page
    }

    const allRows = Array.from(tableBody.getElementsByTagName("tr"));
    const totalRecords = allRows.length;

    function updateCounter(visibleRows) {
      if (recordCounterLabel) recordCounterLabel.textContent = "Mostrando:";
      if (recordCounterValue)
        recordCounterValue.textContent = `${visibleRows} de ${totalRecords}`;
    }

    function applyFilters() {
      const searchTerm = filterInput.value.toLowerCase();
      const showInactive = statusCheckbox.checked;
      const selectedZona = zonaSelect.value;
      let visibleRows = 0;

      for (const row of allRows) {
        const rowStatus = row.dataset.status;
        const rowZonaId = row.dataset.zonaId;
        const nameCell = row.cells[0];
        const cedulaCell = row.cells[1];

        // Conditions for visibility
        const matchesStatus = showInactive || rowStatus === "activo";
        const matchesZona =
          selectedZona === "all" || rowZonaId === selectedZona;
        const matchesSearch =
          !searchTerm ||
          nameCell?.textContent?.toLowerCase().includes(searchTerm) ||
          cedulaCell?.textContent?.toLowerCase().includes(searchTerm);

        if (matchesStatus && matchesZona && matchesSearch) {
          row.style.display = "";
          visibleRows++;
        } else {
          row.style.display = "none";
        }
      }
      updateCounter(visibleRows);
    }

    function handleSearchInput() {
      applyFilters();
      if (filterInput.value) {
        clearFilterBtn.classList.remove("hidden");
        clearFilterBtn.classList.add("flex");
      } else {
        clearFilterBtn.classList.add("hidden");
        clearFilterBtn.classList.remove("flex");
      }
    }

    function clearSearchInput() {
      filterInput.value = "";
      applyFilters();
      clearFilterBtn.classList.add("hidden");
      filterInput.focus();
    }

    async function handleTableClick(e) {
      const target = e.target;
      if (target.classList.contains("delete-btn")) {
        const id = target.dataset.id;
        if (
          id &&
          confirm("¿Estás seguro de que quieres eliminar este registro?")
        ) {
          try {
            const response = await fetch(`/api/miembros/${id}`, {
              method: "DELETE",
            });
            if (response.ok) {
              target.closest("tr")?.remove();
              initializePage(); // Re-initialize to update rows array and counts
            } else {
              const error = await response.json();
              alert(
                `Error al eliminar: ${error.message || response.statusText}`
              );
            }
          } catch (error) {
            alert(`Error de red: ${error.message}`);
          }
        }
      }
    }

    // Attach listeners only once
    if (!filterInput.dataset.initialized) {
      filterInput.addEventListener("input", handleSearchInput);
      clearFilterBtn.addEventListener("click", clearSearchInput);
      statusCheckbox.addEventListener("change", applyFilters);
      zonaSelect.addEventListener("change", applyFilters);
      tableBody.addEventListener("click", handleTableClick);
      filterInput.dataset.initialized = "true";
    }

    // Initial UI setup on every load
    applyFilters();
    handleSearchInput();
  }

  // Listen for Astro's client-side navigation event
  document.addEventListener("astro:page-load", initializePage);
</script>
